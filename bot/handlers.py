import os
import re
import asyncio
from bot.access_control import access_required
import shutil
from bot.notifier import filter_excel_by_tru, TRU_CODES
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    CommandHandler,
    MessageHandler,
    Application,
    filters
)
from bot.notifier import get_procurement_summary, download_excel_file
from bot.users import log_user_id
from bot.email import save_email
from telegram.ext import ConversationHandler

WAITING_FOR_EMAIL = 1
@access_required
async def set_email_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
    return WAITING_FOR_EMAIL
@access_required
async def handle_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    email = update.message.text.strip()

    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
        await update.message.reply_text("‚ùå –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return WAITING_FOR_EMAIL

    save_email(user.id, email)
    await update.message.reply_text(f"‚úÖ –ü–æ—á—Ç–∞ {email} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    return ConversationHandler.END

from bot.email import get_email as get_email_for_user
from bot.email import send_email_with_attachment


@access_required
async def handle_email_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    uid = query.data.replace("email_", "")
    user_id = query.from_user.id
    email = get_email_for_user(user_id)

    if not email:
        await query.message.reply_text("‚ùå –í—ã –µ—â—ë –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ—á—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setemail.")
        return

    raw_file = await asyncio.to_thread(download_excel_file, uid)
    if not raw_file:
        await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª.")
        return

    filtered_file = await asyncio.to_thread(filter_excel_by_tru, raw_file, TRU_CODES, save_file=True)
    if not filtered_file:
        await query.message.reply_text("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π.")
        os.remove(raw_file)
        return

    # --- New code for renaming ---
    # Extract customer and BIN from the message text
    import re

    match_customer = re.search(r"üè¢\s+(.*)", query.message.text)
    match_bin = re.search(r"–ë–ò–ù:\s*([^\n]+)", query.message.text)
    match_type = re.search(r"\|\s*(.*?)\s*\|", query.message.text)
    match_duration = re.search(r"üìã\s*(.*?)\s*\|", query.message.text)

    customer = match_customer.group(1).strip() if match_customer else "Customer"
    customer_bin = match_bin.group(1).strip() if match_bin else "BIN"
    plan_type = match_type.group(1).strip().replace(" ", "_") if match_type else "UnknownType"
    duration_type = match_duration.group(1).strip().replace(" ", "_") if match_duration else "UnknownDuration"

    safe_customer = "".join(c for c in customer if c.isalnum() or c in " _-").strip().replace(" ", "_")
    safe_bin = "".join(c for c in customer_bin if c.isalnum())

    new_filename = f"{safe_customer}_{safe_bin}_{duration_type}_{plan_type}.xlsx"
    new_filepath = os.path.join(os.path.dirname(filtered_file), new_filename)

    shutil.copy(filtered_file, new_filepath)
    # --- End new code ---

    try:
        await asyncio.to_thread(send_email_with_attachment, email, new_filepath, query.message.text)
        await query.message.reply_text(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ü–ó –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}")
    except Exception as e:
        await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –ø–æ—á—Ç—É: {e}")
    finally:
        if raw_file and os.path.exists(raw_file):
            os.remove(raw_file)
        if filtered_file and os.path.exists(filtered_file):
            os.remove(filtered_file)
        if new_filepath and os.path.exists(new_filepath):
            os.remove(new_filepath)
@access_required
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    log_user_id(user.id, user.full_name)

    keyboard = [["/check"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *ZakupBot*!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ø–ª–∞–Ω–∞—Ö –∑–∞–∫—É–ø–æ–∫ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¢–†–£.\n\n"
        "üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n"
        "üîß –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
@access_required
async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–ª–∞–Ω—ã –∑–∞–∫—É–ø–æ–∫, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    summaries = await asyncio.to_thread(get_procurement_summary, TRU_CODES)

    if not summaries:
        await update.message.reply_text("üö´ –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–ª–∞–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    for item in summaries:
        keyboard = InlineKeyboardMarkup([
    [
        InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –ü–ó", callback_data=f"download_{item['uid']}"),
        InlineKeyboardButton("üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ—á—Ç—É", callback_data=f"email_{item['uid']}")
    ]
])

        await update.message.reply_text(
            item["text"],
            reply_markup=keyboard
        )

from telegram.ext import CallbackQueryHandler
@access_required
async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    add_subscription(user_id)
    await update.message.reply_text("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫—É–ø–∫–∞—Ö.")
@access_required
async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    remove_subscription(user_id)
    await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

@access_required
async def handle_download_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    uid = query.data.replace("download_", "")
    file_path = await asyncio.to_thread(download_excel_file, uid)

    if not file_path:
        await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª.")
        return

    # --- New code for renaming ---
    match_customer = re.search(r"üè¢\s+(.*)", query.message.text)
    match_bin = re.search(r"–ë–ò–ù:\s*([^\n]+)", query.message.text)
    match_type = re.search(r"\|\s*(.*?)\s*\|", query.message.text)
    match_duration = re.search(r"üìã\s*(.*?)\s*\|", query.message.text)

    customer = match_customer.group(1).strip() if match_customer else "Customer"
    customer_bin = match_bin.group(1).strip() if match_bin else "BIN"
    plan_type = match_type.group(1).strip().replace(" ", "_") if match_type else "UnknownType"
    duration_type = match_duration.group(1).strip().replace(" ", "_") if match_duration else "UnknownDuration"

    safe_customer = "".join(c for c in customer if c.isalnum() or c in " _-").strip().replace(" ", "_")
    safe_bin = "".join(c for c in customer_bin if c.isalnum())

    new_filename = f"{safe_customer}_{safe_bin}_{duration_type}_{plan_type}.xlsx"
    new_filepath = os.path.join(os.path.dirname(file_path), new_filename)

    shutil.copy(file_path, new_filepath)
    # --- End new code ---

    try:
        await context.bot.send_document(chat_id=query.message.chat_id, document=open(new_filepath, "rb"))
    finally:
        if file_path and os.path.exists(file_path):
            os.remove(file_path)
        if new_filepath and os.path.exists(new_filepath):
            os.remove(new_filepath)

from telegram.ext import ConversationHandler
from bot.subscription import add_subscription, remove_subscription
def register_handlers(app: Application):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("check", check))
    app.add_handler(CommandHandler("subscribe", subscribe))       # ‚úÖ –î–æ–±–∞–≤–∏–ª —Å—é–¥–∞
    app.add_handler(CommandHandler("unsubscribe", unsubscribe))   # ‚úÖ –ò —Å—é–¥–∞
    app.add_handler(CallbackQueryHandler(handle_download_callback, pattern=r"^download_"))
    app.add_handler(CallbackQueryHandler(handle_email_callback, pattern=r"^email_"))

    email_conv = ConversationHandler(
        entry_points=[CommandHandler("setemail", set_email_command)],
        states={WAITING_FOR_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_email)]},
        fallbacks=[],
    )
    app.add_handler(email_conv)
