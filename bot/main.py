import asyncio
import nest_asyncio
from bot.email import get_email as get_email_for_user, send_email_with_attachment
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from telegram.ext import ApplicationBuilder, MessageHandler, filters
from bot.handlers import register_handlers
from config.settings import get_settings
from bot.subscription import load_subscriptions
from bot.notifier import (
    download_excel_file,
    filter_excel_by_tru,
    TRU_CODES,
    DURATION_TYPE_MAP,
    TYPE_MAP,
    load_notified_uids,
    save_notified_uids,
    extract_tru_rows,
    load_tru_history,
    save_tru_history
)
from data_sources.test_api_fetch import fetch_procurement_plans
import os
import shutil

nest_asyncio.apply()

async def periodic_check(app):
    while True:
        await asyncio.sleep(1800)
        print("‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—É–ø–æ–∫...")

        plans = await asyncio.to_thread(fetch_procurement_plans)
        notified_uids = load_notified_uids()
        tru_history = load_tru_history()  # üëà –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¢–†–£
        new_uids = set()

        for plan in plans:
            uid = plan.get("excelFileUid")
            if not uid or uid in notified_uids:
                continue

            print(f"üÜï –ü—Ä–æ–≤–µ—Ä–∫–∞ UID: {uid}")

            file_path = await asyncio.to_thread(download_excel_file, uid)
            if not file_path:
                continue

            filtered_path = await asyncio.to_thread(filter_excel_by_tru, file_path, TRU_CODES)
            os.remove(file_path)

            if not filtered_path:
                new_uids.add(uid)
                continue

            # üëá –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¢–†–£
            customer_bin = plan.get("customerIdentifier", "UNKNOWN")
            tru_rows = await asyncio.to_thread(extract_tru_rows, filtered_path)

            if not tru_rows:
                new_uids.add(uid)
                os.remove(filtered_path)
                continue

            previous_rows = set(tru_history.get(customer_bin, []))
            new_rows = [row for row in tru_rows if row not in previous_rows]

            if not new_rows:
                print(f"üîÅ –ù–µ—Ç –Ω–æ–≤—ã—Ö –¢–†–£ —Å—Ç—Ä–æ–∫ –¥–ª—è –ë–ò–ù {customer_bin}")
                new_uids.add(uid)
                os.remove(filtered_path)
                continue

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            tru_history[customer_bin] = list(previous_rows.union(tru_rows))
            save_tru_history(tru_history)

            # üì© –°–æ–æ–±—â–µ–Ω–∏–µ
            raw_date = plan.get("approveDate")
            date_time = datetime.fromtimestamp(raw_date / 1000).strftime("%Y-%m-%d %H:%M") if raw_date else "‚Äî"
            customer = plan.get("customerName", "‚Äî")
            year = plan.get("year", "‚Äî")
            duration_type = DURATION_TYPE_MAP.get(plan.get("planDurationType", "‚Äî"), "‚Äî")
            plan_type = TYPE_MAP.get(plan.get("planType", "‚Äî"), "‚Äî")

            message = (
                f"üè¢  {customer}\n"
                f"üìå  –ë–ò–ù: {customer_bin}\n"
                f"üìÖ  {date_time}\n"
                f"üìã  {duration_type} | {plan_type} | {year}\n"
                f"üîß  –¢–†–£: –£—Å–ª—É–≥–∏ –ø–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n"
                f"üåê  –ò—Å—Ç–æ—á–Ω–∏–∫: zakup.sk.kz\n"
            )

            for user_id in load_subscriptions():
                try:
                    user = await app.bot.get_chat(user_id)
                    if not user:
                        continue

                    keyboard = InlineKeyboardMarkup([
                        [
                            InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –ü–ó", callback_data=f"download_{uid}"),
                            InlineKeyboardButton("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ—á—Ç—É", callback_data=f"email_{uid}")
                        ]
                    ])

                    await app.bot.send_message(
                        chat_id=user_id,
                        text=message,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                    print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

                    email = get_email_for_user(user_id)
                    if email:
                        safe_customer = "".join(c for c in customer if c.isalnum() or c in " _-").strip().replace(" ", "_")
                        safe_bin = "".join(c for c in customer_bin if c.isalnum())
                        safe_duration = duration_type.replace(" ", "_") if duration_type else "Unknown"
                        safe_type = plan_type.replace(" ", "_") if plan_type else "Unknown"

                        new_filename = f"{safe_customer}_{safe_bin}_{safe_duration}_{safe_type}.xlsx"
                        new_filepath = os.path.join(os.path.dirname(filtered_path), new_filename)
        

                        shutil.copy(filtered_path, new_filepath)

                        try:
                            await asyncio.to_thread(send_email_with_attachment, email, new_filepath, message)
                            print(f"üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email {email}: {e}")
                        finally:
                            if os.path.exists(new_filepath):
                                os.remove(new_filepath)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            new_uids.add(uid)
            os.remove(filtered_path)

        if new_uids:
            notified_uids.update(new_uids)
            save_notified_uids(notified_uids)

async def run_bot():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    settings = get_settings()

    if not settings.BOT_TOKEN:
        raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env –∏–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")

    app = ApplicationBuilder().token(settings.BOT_TOKEN).build()
    register_handlers(app)

    # üîÅ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    asyncio.create_task(periodic_check(app))

    await app.run_polling(close_loop=False)

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(run_bot())
    except KeyboardInterrupt:
        print("‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
